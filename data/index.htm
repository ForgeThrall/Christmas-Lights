<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Christmas Lights</title>
	<link rel="icon" type="image/svg+xml" sizes="any" href="favicon.svg"/>
	<script>
		let socket;
		let palettePicker;
		let colorPicker;
		const API = {
			COLOR: 100,
			PATTERN: 101,
			PALETTE_SIZE: 102,
		}

		function init() {
			colorPicker = ColorPicker.initAll()[0];
			palettePicker = PalettePicker.initAll()[0];
			initSocket();
		}

		class ColorPicker {
			hsv = {h: 0, s: .5, v: .5};
			pickerElement;
			callback;
			hueContainer;
			satContainer;
			valContainer;

			constructor(element) {
				element.insertAdjacentHTML("afterbegin",
					`<div class="dial-container">
						<div class="dial-ring"></div>
						<div class="dial-cursor"></div>
					</div>
					<div class="slider-container sat">
						<div class="slider-bar sat"></div>
						<div class="slider-cursor sat"></div>
					</div>
					<div class="slider-container val">
						<div class="slider-bar val"></div>
						<div class="slider-cursor val"></div>
					</div>`
				);
				this.pickerElement = element;
				this.callback = window[element.getAttribute("listener")];
				this.hueContainer = this.pickerElement.getElementsByClassName("dial-container")[0];
				this.satContainer = this.pickerElement.getElementsByClassName("slider-container sat")[0];
				this.valContainer = this.pickerElement.getElementsByClassName("slider-container val")[0];
				
				ColorPicker.dragBootstrap(this.hueContainer, this.hueDialDrag.bind(this));
				ColorPicker.dragBootstrap(this.satContainer, this.satSliderDrag.bind(this));
				ColorPicker.dragBootstrap(this.valContainer, this.valSliderDrag.bind(this));
			}

			static initAll(){
				let elements = [];
				Array.from(document.getElementsByClassName("color-picker")).forEach(element => {
					elements.push(new ColorPicker(element));
				});
				return elements;
			}

			hueDialDrag(e) {
				let rect = this.hueContainer.getBoundingClientRect();
				let pageX = e.pageX ?? e.touches[0].pageX;
				let pageY = e.pageY ?? e.touches[0].pageY;
				let xTarget = pageX - rect.x - rect.width/2;
				let yTarget = pageY - rect.y - rect.height/2;
				let t = Math.atan2(yTarget, xTarget);

				let hue = ColorPicker.rangeMap(t, -Math.PI, Math.PI, 0, 1, -Math.PI/2);
				this.setcolor(hue, null, null);
			}

			satSliderDrag(e) {
				let rect = this.satContainer.getBoundingClientRect();
				let pageX = e.pageX ?? e.touches[0].pageX;
				let x = Math.max(0, Math.min(pageX - rect.x, rect.width));
				let sat = ColorPicker.rangeMap(x, 0, rect.width, 0, 1);
				this.setcolor(null, sat, null);
			}

			valSliderDrag(e) {
				let rect = this.valContainer.getBoundingClientRect();
				let pageX = e.pageX ?? e.touches[0].pageX;
				let x = Math.max(0, Math.min(pageX - rect.x, rect.width));
				let val = ColorPicker.rangeMap(x, 0, rect.width, 0, 1);
				this.setcolor(null, null, val);
			}

			// TODO: the dial selector snaps to the new color before it reaches the new position
			// tie it to the position blend
			setcolor(h, s, v, triggerUpdate = true) {
				// css rotation animation needs special cases to take the shortest path
				let _h = h ?? this.hsv.h;
				let current = this.pickerElement.style.getPropertyValue("--hsv-h");
				while(_h - current >  .5) _h -= 1;
				while(_h - current < -.5) _h += 1;

				this.hsv.h = h ?? this.hsv.h;
				this.hsv.s = s ?? this.hsv.s;
				this.hsv.v = v ?? this.hsv.v;

				this.pickerElement.style.setProperty("--hsv-h", _h);
				this.pickerElement.style.setProperty("--hsv-s", this.hsv.s);
				this.pickerElement.style.setProperty("--hsv-v", this.hsv.v);

				let r, g, b;
				[r, g, b] = ColorPicker.hsvToRgb(this.hsv.h, 1, 1);
				this.pickerElement.style.setProperty("--rgb-h", `rgb(${r}, ${g}, ${b})`);
				[r, g, b] = ColorPicker.hsvToRgb(this.hsv.h, this.hsv.s, 1);
				this.pickerElement.style.setProperty("--rgb-hs", `rgb(${r}, ${g}, ${b})`);
				[r, g, b] = ColorPicker.hsvToRgb(this.hsv.h, this.hsv.s, this.hsv.v);
				this.pickerElement.style.setProperty("--rgb-hsv", `rgb(${r}, ${g}, ${b})`);

				if(triggerUpdate) this.callback.onColorChange(this.hsv);
			}
			
			// TODO: Add touch-drag capability
			static dragBootstrap(element, handler) {
				element.addEventListener("mousedown", (e) => {
					element.style.setProperty("transition", "none");
					document.addEventListener("mousemove", handler);
					document.addEventListener("mouseup", function () {
						element.style.removeProperty("transition");
						document.removeEventListener("mousemove", handler)
					}, {once: true});
					handler(e);
				})
				//same but for touch events
				element.addEventListener("touchstart", (e) => {
					element.style.setProperty("transition", "none");
					document.addEventListener("touchmove", handler);
					document.addEventListener("touchend", function () {
						element.style.removeProperty("transition");
						document.removeEventListener("touchmove", handler)
					}, {once: true});
					handler(e);
				})
			}

			static rangeMap(val, inMin, inMax, outMin, outMax, inOffset = 0) {
				let inSpan = inMax - inMin;
				let outSpan = outMax - outMin;

				val += inOffset;
				if(val < inMin) val += inSpan;
				if(val > inMax) val -= inSpan;

				val -= inMin;
				val *= outSpan/inSpan;
				val += outMin;

				return val;
			}

			// https://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
			// h, s, v âˆˆ [0, 1]
			static hsvToRgb(h, s, v){
				var r, g, b;

				var i = Math.floor(h * 6);
				var f = h * 6 - i;
				var p = v * (1 - s);
				var q = v * (1 - f * s);
				var t = v * (1 - (1 - f) * s);

				switch(i % 6){
					case 0: r = v, g = t, b = p; break;
					case 1: r = q, g = v, b = p; break;
					case 2: r = p, g = v, b = t; break;
					case 3: r = p, g = q, b = v; break;
					case 4: r = t, g = p, b = v; break;
					case 5: r = v, g = p, b = q; break;
				}

				return [r * 255, g * 255, b * 255];
			}
		}

		// TODO: Add list size parameters (eg, pattern that needs 2-4 colors)
		class PalettePicker {
			size = 5;
			palette = [];
			index = 0;
			paletteElement;
			entryElements = [];
			callback;

			constructor(element) {
				let HTMLinsert = `<div class="palette-container">`;
				for(let i = this.size-1; i >= 0; i--){
					let h = 0, s = .5, v = .5;
					let r, g, b;
					// TODO: break out these color utilities
					[r, g, b] = ColorPicker.hsvToRgb(h, s, 1);
					this.palette[i] = {h: h, s: s, v: v};
					HTMLinsert += `<div class="palette-entry" index="${i}" style="--index: ${i}; --entry-color: rgb(${r}, ${g}, ${b})"></div>`;
				}
				HTMLinsert += `
					<div class="palette-decrease">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z"/></svg>
					</div>
					<div class="palette-increase">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M416 352c-8.188 0-16.38-3.125-22.62-9.375L224 173.3l-169.4 169.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l192-192c12.5-12.5 32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25C432.4 348.9 424.2 352 416 352z"/></svg>
					</div>
					<div class="palette-indicator"></div>
					</div>`
				element.insertAdjacentHTML("afterbegin", HTMLinsert);

				this.paletteElement = element;
				this.callback = window[element.getAttribute("listener")];

				Array.from(element.getElementsByClassName("palette-entry")).forEach( element => {
					this.entryElements[element.getAttribute("index")] = element;
					element.addEventListener("mousedown", this.paletteSelect.bind(this));
				});
				element.getElementsByClassName("palette-decrease")[0].addEventListener("mousedown", this.paletteDecrease.bind(this));
				element.getElementsByClassName("palette-increase")[0].addEventListener("mousedown", this.paletteIncrease.bind(this));
			}

			paletteSelect(e) {
				this.setIndex(e.target.getAttribute("index"));
			}

			paletteDecrease(e) {
				if(this.size < 2) return;
				if(this.index >= this.size-1) this.setIndex(this.size-2);
				this.size--;
				this.paletteElement.style.setProperty("--entry-count", this.size);
				this.entryElements[this.size].style.setProperty("opacity", 0);
				this.callback.onSizeChange(this.size);
			}

			paletteIncrease(e) {
				if(this.size > 4) return;
				this.size++;
				this.paletteElement.style.setProperty("--entry-count", this.size);
				this.entryElements[this.size-1].style.setProperty("opacity", 1);
				this.callback.onSizeChange(this.size);
			}

			setColor(h, s, v, index = this.index) {
				let [r, g, b] = ColorPicker.hsvToRgb(h, s, 1);
				this.palette[index] = {h: h, s: s, v: v};
				this.entryElements[index].style.setProperty("--entry-color", `rgb(${r}, ${g}, ${b}`);
			}

			setIndex(newIndex) {
				if(newIndex === this.index || newIndex >= this.size) return;
				this.index = newIndex;
				this.paletteElement.style.setProperty("--active-entry", this.index);
				this.callback.onIndexChange(this.index);
			}

			getColor(index = this.index) {
				return this.palette[index];
			}

			getIndex() {
				return this.index;
			}

			static initAll(){
				let elements = [];
				Array.from(document.getElementsByClassName("palette-picker")).forEach(element => {
					elements.push(new PalettePicker(element));
				});
				return elements;
			}
		}

		function initSocket() {
			socket = new WebSocket(`ws://1.2.3.4:81`);

			socket.binaryType = 'arraybuffer';
			socket.onopen = (e) => {console.log("opened connection");}
			socket.onclose = (e) => {console.log("closed connection");}
			socket.onmessage = (e) => {
				console.log("received message");
				let data = new Uint8Array(e.data);
				consol.log(data);
			}
		}

		function sendCommandToServer(...args) {
			if(socket.readyState != WebSocket.OPEN) return;
			socket.send(Uint8Array.from(args.flat()).buffer);
		}

		paletteListener = {
			onIndexChange(index) {
				let {h, s, v} = palettePicker.getColor();
				colorPicker.setcolor(h, s, v, false);
			},
			onSizeChange(size) {
				sendCommandToServer(API.PALETTE_SIZE, size);
			}
		}

		colorListener = {
			onColorChange(hsv) {
				let [r, g, b] = ColorPicker.hsvToRgb(hsv.h, hsv.s, hsv.v).map(e => Math.floor(e));
				palettePicker.setColor(hsv.h, hsv.s, hsv.v);
				sendCommandToServer(API.COLOR, palettePicker.getIndex(), r, g, b);
			}
		}
	</script>

	<style>
		:root {
			--background-color: #1d1d1f;
		}
		html,body {
			width:  100%;
			height: 100%;
			margin: 0%;
			padding: 0%;
			background-color: var(--background-color);
			cursor: default;
		}

		body {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
		}

		.bounding-box {
			/* magic numbers */
			width: min(80vw, 80vh * 200 / 355);
		}

		
		.color-picker {
			--background-color: #1d1d1f;
			/* in percents of dial diameter */
			--line-thickness: 5;
			--indicator-size: 40;
			--dial-cursor-size: 18;
			--slider-cursor-size: 15;
			position: relative;
			background: var(--background-color);
			--hsv-h: 0;
			--hsv-s: .5;
			--hsv-v: .5;
			--rgb-h: #F00;
			--rgb-hs: #FF8080;
			--rgb-hsv: #804040;
		}
		.color-picker,
		.color-picker *,
		.color-picker *::before
		.color-picker *::after {
			user-select: none;
			box-sizing: border-box;
		}

		.color-picker {
			width: 100%;
			margin-top: 12.5%;
		}

		.dial-container {
			position: relative;
			aspect-ratio: 1;
			transition: transform .25s;
		}
		/* centered circle */
		/* TODO: css precompiler with mixins */
		.dial-ring,
		.dial-ring::before,
		.dial-ring::after,
		.dial-cursor,
		.dial-cursor::after,
		.slider-cursor,
		.slider-cursor::after {
			position: absolute;
			top: 50%; left: 50%;
			transform: translate(-50%, -50%);
			border-radius: 50%;
			aspect-ratio: 1;
		}
		.dial-ring {
			width: 100%;
			background: conic-gradient(#F00, #FF0, #0F0, #0FF, #00F, #F0F, #F00);
		}
		.dial-ring::before {
			content: '';
			width: calc(100% - var(--line-thickness) * 2 * 1%);
			background: var(--background-color);
		}
		.dial-ring::after {
			content: '';
			width: calc(var(--indicator-size) * 1%);
			background: var(--rgb-hs);
		}
		.dial-cursor {
			transform: translate(-50%, -50%)
				rotate(calc(var(--hsv-h) * 360deg))
				translateY(calc(-100% * ((50 - var(--line-thickness) / 2) / var(--dial-cursor-size))));
			width: calc(var(--dial-cursor-size) * 1%);
			background: var(--background-color);
			transition: inherit;
		}
		.dial-cursor::after {
			content: '';
			width: 80%;
			background: var(--rgb-h);
		}

		.slider-container {
			position: relative;
			width: 100%;
			margin-top: 10%;
			aspect-ratio: 100 / var(--slider-cursor-size);
			transition: left .25s;
		}
		.slider-bar {
			position: absolute;
			top: 50%; left: 50%;
			transform: translate(-50%, -50%);
			width: 100%;
			aspect-ratio: 100 / var(--line-thickness);
			border-radius: 100vh;
		}
		.slider-cursor {
			width: calc(var(--slider-cursor-size) * 1%);
			background: var(--background-color);
			transition: inherit;
		}

		.slider-bar.sat {
			background: linear-gradient(90deg, #FFF, var(--rgb-h));
		}
		.slider-cursor.sat {
			left: calc(var(--hsv-s) * 100%);
		}
		.slider-cursor.sat::after {
			content: '';
			width: 80%;
			background: var(--rgb-hs);
		}

		.slider-bar.val {
			background: linear-gradient(90deg, #000, var(--rgb-hs));
		}
		.slider-cursor.val {
			left: calc(var(--hsv-v) * 100%);
		}
		.slider-cursor.val::after {
			content: '';
			width: 80%;
			background: var(--rgb-hsv);
		}

		
		.palette-picker {
			--active-entry: 0;
			--entry-count: 5;
			--button-size: 12;
			--entry-size: 15;
		}

		.palette-picker {
			position: relative;
			width: 100%;
		}

		.palette-picker,
		.palette-picker *,
		.palette-picker *::after {
			user-select: none;
			box-sizing: border-box;
		}

		.palette-container {
			background-color: #4c4c4f;
			border-radius: calc(.04 * min(80vw, 80vh * 200 / 355));
			position: relative;
			width: 100%;
			aspect-ratio: 100 / var(--entry-size);
		}

		/* centered circles */
		.palette-entry,
		.palette-entry::after,
		.palette-indicator,
		.palette-decrease,
		.palette-increase,
		.palette-decrease::after,
		.palette-increase::after  {
			position: absolute;
			top: 50%; left: 50%;
			transform: translate(-50%, -50%);
			border-radius: 50%;
			aspect-ratio: 1;
		}
		/* squircles */
		.palette-decrease,
		.palette-increase,
		.palette-decrease::after,
		.palette-increase::after {
			border-radius: 15%;
		}
		/* squares */
		.palette-entry {
			border-radius: 0%;
		}

		.palette-decrease,
		.palette-increase {
			background: #4c4c4f;
			width: calc(var(--button-size) * 1%);
		}

		.palette-decrease {
			left: 0%;
		}
		.palette-increase {
			left: 100%;
		}

		.palette-decrease::after,
		.palette-increase::after {
			content: '';
			width: 80%;
			background: white;
			z-index: -1;
		}

		.palette-decrease svg,
		.palette-increase svg {
			position: absolute;
			top: 50%; left: 50%;
			transform: translate(-50%, -50%);
			width: 50%;
		}

		.palette-entry {
			left: min(calc((((100 - var(--button-size) + var(--entry-size)) / (var(--entry-count) + 1)) * (var(--index) + 1) + var(--button-size) / 2 - var(--entry-size) / 2) * 1%),
			          calc((((100 - var(--button-size) + var(--entry-size)) / (          6           )) * (       5        ) + var(--button-size) / 2 - var(--entry-size) / 2) * 1%));
			width: calc(var(--entry-size) * 1%);
			transition: left .25s, opacity .25s;
		}
		.palette-entry::after {
			content: '';
			width: 80%;
			background: var(--entry-color);
		}

		.palette-indicator {
			left: calc((((100 - var(--button-size) + var(--entry-size)) / (var(--entry-count) + 1)) * (var(--active-entry) + 1) + var(--button-size) / 2 - var(--entry-size) / 2) * 1%);
			background: white;
			border-radius: 100vh;
			width: calc(var(--entry-size) * .9 * 1%);
			height: 20%;
			top: 120%;
			transition: left .25s;
		}

	</style>
</head>
<body>
	<div class="bounding-box">
		<div class="palette-picker" listener="paletteListener"></div>
		<div class="color-picker" listener="colorListener"></div>
	</div>
</body>
</html>
<script>
	init();
</script>